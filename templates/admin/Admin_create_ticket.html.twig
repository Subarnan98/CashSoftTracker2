{% extends 'base.html.twig' %}

{% block title %}Support Cash Converters - Admin NewTicket{% endblock %}

{% block body %}
    <div class="card card_ticket">
        <div class="card-header">
            <h3> <i class="fas fa-plus"> Création Ticket  </i></h3>
        </div>
        
        <div class="card-body">
            <a href="{{ path('admin.tickets.all') }}" class="btn btn-outline-dark" role="button"><i class="fas fa-undo"> Retour à la liste des Tickets </i> </a>
            <br>
            {{ form_start(form) }}
                {{ form_row(form.Mag) }}
                {{ form_widget(form) }}
                
                {# We add a hidden field in the form to pass tempId to the backend when creating the ticket #}
                <input type="hidden" name="temp_id" id="temp_id" value="">
                
                {# When we click on "Envoyer" button it calls createTicket() method of AdminController  #}
                <button type="submit" role="button" class="btn btn-outline-success"> 
                    <i class="fas fa-plus"> Créer </i>
                </button>
            {{form_end(form)}}
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }} {# Imports javascript block from parent template (base.html.twig) #}

    {# CKEditor configuration #}
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // We create temporary ids for uploaded files
            const tempId = 'temp_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            
            document.getElementById('temp_id').value = tempId;
            
            // We create a javaScript adapter "MyUploadAdapter" to handle the file upload with CKEditor
            class MyUploadAdapter 
            {
                constructor(loader) {
                    this.loader = loader;
                }

                // This method is called automatically during file upload
                upload() 
                {
                    return this.loader.file
                        .then(file => new Promise((resolve, reject) => 
                        {
                            // La liste des types MIME autorisés
                            const acceptedFileTypes = ['image/*', 'application/pdf', 'text/plain', 'text/csv'];

                            // Vérification du type de fichier
                            if (!acceptedFileTypes.some(type => file.type.match(type))) 
                            {
                                reject('Type de fichier non supporté');
                                return; // Stop the upload process
                            }
                            
                            const formData = new FormData();
                            formData.append('upload', file);
                            formData.append('temp_id', tempId); 

                            // With JS fetch() API we call uploadImage() method of CKEFileUploadController
                            fetch('/upload/file', { 
                                method: 'POST',
                                body: formData
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (!data || !data.url) {
                                        reject(data && data.message ? data.message : 'Erreur lors de l\'upload');
                                    } else {
                                        // Ajout de la logique pour gérer les images et les autres fichiers
                                        if (file.type.startsWith('image/')) {
                                            resolve({ default: data.url }); // Affiche une image
                                        } else {
                                            resolve({
                                                default: `<a href="${data.url}" target="_blank">${file.name}</a>` // Insère un lien
                                            });
                                        }
                                    }
                                })
                                .catch(error => {
                                    reject('Erreur lors de l\'upload : ' + error.message);
                                });
                        }));
                }

                // Method called if the upload is canceled
                abort() 
                {
                    // Cancellation logic (optional)
                }
            }

            // This function integrates the adapter
            function MyCustomUploadAdapterPlugin(editor) 
            {
                editor.plugins.get('FileRepository').createUploadAdapter = loader => {
                    return new MyUploadAdapter(loader);
                };
            }

            function MyFileUploadAdapterPlugin(editor) 
            {
                editor.ui.componentFactory.add('fileUpload', locale => {
                    const view = new editor.ui.button.ButtonView(locale);

                    view.set({
                        label: 'Téléverser un fichier',
                        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="17 8 12 3 7 8"/><line x1="12" y1="3" x2="12" y2="15"/></svg>', // Ajoutez un icône personnalisé ici
                        tooltip: true
                    });

                    view.on('execute', () => {
                        // Logic to handle file upload dialog
                        const input = document.createElement('input');
                        input.type = 'file';
                        input.accept = '.pdf,.txt,.csv';
                        input.onchange = () => {
                            const file = input.files[0];
                            if (file) {
                                // Téléverser le fichier via fetch ou AJAX
                                const formData = new FormData();
                                formData.append('upload', file);

                                fetch('/upload/file', {
                                    method: 'POST',
                                    body: formData
                                })
                                    .then(response => response.json())
                                    .then(data => {
                                        if (data.url) {
                                            const link = `<a href="${data.url}" target="_blank">${file.name}</a>`;
                                            editor.model.change(writer => {
                                                const insertPosition = editor.model.document.selection.getFirstPosition();
                                                writer.insertText(link, insertPosition);
                                            });
                                        }
                                    })
                                    .catch(error => console.error('Erreur lors du téléversement de fichier:', error));
                            }
                        };

                        input.click();
                    });

                    return view;
                });
            }

            
            ClassicEditor.create(document.querySelector('.ckeditor'), {
                extraPlugins: [MyCustomUploadAdapterPlugin],
                toolbar: [
                    'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', 
                    'insertTable', 'imageUpload', 'fileUpload', 'undo', 'redo'
                ],
                
                
                fileUpload: {
                    types: ['pdf', 'txt', 'csv']
                },
                

                /**
                // Allows us to manage different types of files
                mediaEmbed: { 
                    previewsInData: true
                } 
                */
                
                
            })
            .then(editor => {
                const form = document.querySelector('form');
                form.addEventListener('submit', (event) => {
                    const editorData = editor.getData();
                    if (!editorData.trim()) 
                    { // Check if content is empty
                        event.preventDefault(); // Stop form submission
                        alert('Veuillez remplir le champ message.');
                    }
                });
            })
            .catch(error => {
                console.error(error);
            });
        })
    </script>


    <script>
        // When we select "Catégorie" name it automatically fills "Titre" input
        $(document).ready(function() {
            $('#ticket_Categorie').on('change', function() {
                let selectedText = $('#ticket_Categorie option:selected').text();

                switch(selectedText) 
                {
                    case "Autres":
                        problem = ""
                        break;
                    case "Box internet":
                        problem = "Panne internet"
                        break;
                    case "Carte Fidélité":
                        problem = "Ajout point ou activation carte"
                        break;
                    case "CashSoft":
                        problem = "Problème"
                        break;
                    case "Compte utilisateur":
                        problem = "Création ou modification du compte"
                        break;
                    case "Matériel informatique":
                        problem = "Panne matériel informatique"
                        break;
                    case "Site internet":
                        problem = "Extranet ou Revendre"
                        break;
                    default:
                        problem = "";
                }
                
                $('#ticket_Titre').val(problem);
            });
        });
    </script>
{% endblock %}

